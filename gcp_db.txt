Project name: 50-001 1D

- To create template table for each db
CREATE TABLE table_name(name varchar(255),id int); INSERT INTO table_name VALUES ('susan',43); INSERT INTO table_name VALUES ('boi',34); INSERT INTO table_name VALUES ('imNotTheMostCreativeWithNames',001);


- Connecting psql to GCP SQL instance -
psql "sslmode=disable dbname=postgres user=postgres hostaddr=[INSTANCE_IP]"
Just change hostaddr
https://cloud.google.com/sql/docs/postgres/connect-admin-ip


- Creating roles (users to our db) -
postgres=> create role testuser with password 'testuser' login;   
postgres=> grant cloudsqlsuperuser to testuser;   SELECT 
https://stackoverflow.com/questions/47249546/amazon-rds-postgresql-how-to-create-user 
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.PostgreSQL.CommonDBATasks.html#Appendix.PostgreSQL.CommonDBATasks.Roles 


- Granting user access to DB
GRANT CONNECT ON DATABASE my_db TO my_user;
https://stackoverflow.com/questions/22483555/give-all-the-permissions-to-a-user-on-a-db


-PostgreSQL Cheatsheet-
- To create new table:
CREATE TABLE table_name(
  column_name1 DATATYPE1,
  column_name2 DATATYPE2
)

- To drop a table (delete table)
DROP TABLE table_name

- To insert new value
INSERT INTO table_name (column_namex, column_namey) VALUES (datax, datay)

- Retrieve data using SELECT
SELECT column_name1 FROM table_name;
# returns all data from column_name1 from table_name. column_name1 can be replaced with * to return all column data

- Conditions when selecting data
SELECT column_name2 FROM table_name
WHERE column_name1 = data1
AND column_name3 = data3;

- Ordering returned value
SELECT * FROM table_name
WHERE column_name2 < data
ORDER BY column_name1;
# return data ordered ascending order using data column_name1
# if we want to return in descending order, replace last line with 'ORDER BY column_name1 desc;'

- Update records
# good practice to run SELECT first to make sure that's the data we're looking for
UPDATE test_table
SET column_name1 = data1
WHERE [conditions]

- Delete records
# good practice to run SELECT first to make sure that's the data we're looking for
DELETE test_table
WHERE [conditions]
















